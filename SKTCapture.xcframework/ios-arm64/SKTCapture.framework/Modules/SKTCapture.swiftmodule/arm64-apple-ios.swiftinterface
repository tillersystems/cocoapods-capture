// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SKTCapture
import Foundation
@_exported import SKTCapture
import Swift
import _Concurrency
public protocol CaptureHelperDelegate {
}
public protocol CaptureHelperErrorDelegate : CaptureHelperDelegate {
  func didReceiveError(_ error: SKTResult)
}
public protocol CaptureHelperDevicePresenceDelegate : CaptureHelperDelegate {
  func didNotifyArrivalForDevice(_ device: CaptureHelperDevice, withResult result: SKTResult)
  func didNotifyRemovalForDevice(_ device: CaptureHelperDevice, withResult result: SKTResult)
}
public protocol CaptureHelperDeviceManagerPresenceDelegate : CaptureHelperDelegate {
  func didNotifyArrivalForDeviceManager(_ device: CaptureHelperDeviceManager, withResult result: SKTResult)
  func didNotifyRemovalForDeviceManager(_ device: CaptureHelperDeviceManager, withResult result: SKTResult)
}
public protocol CaptureHelperDeviceManagerDiscoveryDelegate : CaptureHelperDelegate {
  func didDiscoverDevice(_ device: Swift.String, fromDeviceManager deviceManager: CaptureHelperDeviceManager)
  func didEndDiscoveryWithResult(_ result: SKTResult, fromDeviceManager deviceManager: CaptureHelperDeviceManager)
}
public protocol CaptureHelperDeviceDecodedDataDelegate : CaptureHelperDelegate {
  func didReceiveDecodedData(_ decodedData: SKTCaptureDecodedData?, fromDevice device: CaptureHelperDevice, withResult result: SKTResult)
}
public protocol CaptureHelperDevicePowerDelegate : CaptureHelperDelegate {
  func didChangePowerState(_ powerState: SKTCapturePowerState, forDevice device: CaptureHelperDevice)
  func didChangeBatteryLevel(_ batteryLevel: Swift.Int, forDevice device: CaptureHelperDevice)
}
public protocol CaptureHelperDeviceButtonsDelegate : CaptureHelperDelegate {
  func didChangeButtonsState(_ buttonsState: SKTCaptureButtonsState, forDevice device: CaptureHelperDevice)
}
public protocol CaptureHelperAllDelegate : CaptureHelperDeviceButtonsDelegate, CaptureHelperDeviceDecodedDataDelegate, CaptureHelperDeviceManagerPresenceDelegate, CaptureHelperDevicePowerDelegate, CaptureHelperDevicePresenceDelegate, CaptureHelperErrorDelegate {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CaptureHelperDevice : ObjectiveC.NSObject {
  public var extensionProperties: Swift.Dictionary<Swift.String, Any>
  public var deviceInfo: SKTCaptureDeviceInfo
  public var dispatchQueue: Dispatch.DispatchQueue?
  open func getFriendlyNameWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ name: Swift.String?) -> Swift.Void)
  open func setFriendlyName(_ name: Swift.String, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getBluetoothAddressWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ bluetoothAddress: Foundation.Data?) -> Swift.Void)
  open func getTypeWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ deviceType: Swift.UInt?) -> Swift.Void)
  open func getFirmwareVersionWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ version: SKTCaptureVersion?) -> Swift.Void)
  open func getBatteryLevelWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ batteryLevel: Swift.UInt?) -> Swift.Void)
  open func getPowerStateWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ powerState: Swift.UInt?) -> Swift.Void)
  open func getButtonsStateWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ buttonsState: SKTCaptureButtonsState?) -> Swift.Void)
  open func getStandConfigWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ config: SKTCaptureStandConfig?) -> Swift.Void)
  open func setStandConfig(_ config: SKTCaptureStandConfig, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getDecodeActionWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ decodeAction: SKTCaptureLocalDecodeAction?) -> Swift.Void)
  open func setDecodeAction(_ decodeAction: SKTCaptureLocalDecodeAction, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getDataAcknowledgmentWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ dataAcknownledgement: SKTCaptureDeviceDataAcknowledgment?) -> Swift.Void)
  open func setDataAcknowledgment(_ dataAcknowledgment: SKTCaptureDeviceDataAcknowledgment, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getPostambleWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ postamble: Swift.String?) -> Swift.Void)
  open func setPostamble(_ postamble: Swift.String, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getDataSourceInfoFromId(_ dataSourceId: SKTCaptureDataSourceID, withCompletionHandler completion: @escaping (_ result: SKTResult, _ dataSourceInfo: SKTCaptureDataSource?) -> Swift.Void)
  open func setDataSourceInfo(_ dataSource: SKTCaptureDataSource, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func setTrigger(_ trigger: SKTCaptureTrigger, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func setDataConfirmationWithLed(_ led: SKTCaptureDataConfirmationLed, withBeep beep: SKTCaptureDataConfirmationBeep, withRumble rumble: SKTCaptureDataConfirmationRumble, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func setNotifications(_ notifications: SKTCaptureNotifications, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getNotificationsWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ notifications: SKTCaptureNotifications?) -> Swift.Void)
  open func setSoftScanOverlayViewParameter(_ parameters: Swift.Dictionary<Swift.String, Any>, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getSoftScanOverlayViewParameterWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ parameter: Swift.Dictionary<Swift.String, Any>?) -> Swift.Void)
  open func getDeviceSpecificCommand(_ command: Foundation.Data, withCompletionHandler completion: @escaping (_ result: SKTResult, _ commandResult: Foundation.Data?) -> Swift.Void)
  open func setDataFormat(dataFormat: SKTCaptureDataFormat, completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getDataFormatWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ dataFormat: SKTCaptureDataFormat?) -> Swift.Void)
  open func getProperty(_ property: SKTCaptureProperty, withCompletionHandler completion: @escaping (_ result: SKTResult, _ complete: SKTCaptureProperty?) -> Swift.Void)
  open func setProperty(_ property: SKTCaptureProperty, withCompletionHandler completion: @escaping (_ result: SKTResult, _ complete: SKTCaptureProperty?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CaptureHelperDeviceManager : CaptureHelperDevice {
  open func startDiscoveryWithTimeout(_ timeout: ObjectiveC.NSInteger, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func setFavoriteDevices(_ favorites: Swift.String, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getFavoriteDevicesWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ favorites: Swift.String?) -> Swift.Void)
  open func getDeviceUniqueIdentifierFromDeviceGuid(_ deviceGuid: Swift.String, withCompletionHandler completion: @escaping (_ result: SKTResult, _ deviceUniqueIdentifier: Swift.String?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CaptureHelper : ObjectiveC.NSObject, SKTCaptureDelegate {
  public var extensionProperties: Swift.Dictionary<Swift.String, Any>
  public var dispatchQueue: Dispatch.DispatchQueue?
  public static let sharedInstance: CaptureHelper
  public var captureApi: SKTCapture? {
    get
  }
  @discardableResult
  open func pushDelegate(_ delegate: CaptureHelperDelegate) -> Swift.Bool
  @discardableResult
  open func popDelegate(_ delegate: CaptureHelperDelegate) -> Swift.Bool
  open func getDevices() -> Swift.Array<CaptureHelperDevice>
  open func getDeviceManagers() -> Swift.Array<CaptureHelperDeviceManager>
  open func openWithAppInfo(_ appInfo: SKTAppInfo, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func closeWithCompletionHandler(_ completion: @escaping (_ result: SKTResult) -> Swift.Void)
  @objc public func didReceive(_ event: SKTCaptureEvent, for capture: SKTCapture, withResult result: SKTResult)
  open func getVersionWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ version: SKTCaptureVersion?) -> Swift.Void)
  open func getConfirmationModeWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ confirmationMode: SKTCaptureDataConfirmation?) -> Swift.Void)
  open func setConfirmationMode(_ confirmationMode: SKTCaptureDataConfirmation, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getSoftScanStatusWithCompletionHandler(_ completion: @escaping (_ result: SKTResult, _ status: SKTCaptureSoftScan?) -> Swift.Void)
  open func setSoftScanStatus(_ status: SKTCaptureSoftScan, withCompletionHandler completion: @escaping (_ result: SKTResult) -> Swift.Void)
  open func getProperty(_ property: SKTCaptureProperty, withCompletionHandler completion: @escaping (_ result: SKTResult, _ complete: SKTCaptureProperty?) -> Swift.Void)
  open func setProperty(_ property: SKTCaptureProperty, withCompletionHandler completion: @escaping (_ result: SKTResult, _ complete: SKTCaptureProperty?) -> Swift.Void)
  @objc deinit
}
